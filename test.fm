load hvm.maude .
*** red itoa(1354) .
*** red compile(ctor('Pair (ctor('Pair var('a) var('a))) var('b))) .
*** red count-vars(ctor('Pair (ctor('Pair var('a) var('a))) var('b))) .

set trace on .
*** set trace select on .
set trace eq off .
*** trace select compile' compile .
*** trace select duplicator duplicator-go .
*** set break on .
*** break select compile' .
*** set trace rewrite off .
set trace body off .
set trace builtin off .
*** set trace condition off .
set trace substitution off .

*** red dup-ctr('Test, i(1) i(42), 1, 1, cctor('Body), nil, nil) .

*** match [CL, CS'] <=? compile'((1 2), false, < 1, 1, 1 # empty # empty >) .
*** red compile'(ctor('Pair, 1 2), false, < 1, 1, 1 # empty # empty >) .
*** match [N,< Vs',Ds',Ss' # NM' # VCM' >] <=? new-var(< 1, 1, 1 # empty # empty >) .
*** red compile'((let 'a = ctor('Pair, 1 2) ; var('a)), false, < 1, 1, 1 # empty # empty >) .
*** red duplicator(< 2,2,1 # 'a |-> x{1} # 1 |-> 3 >, 1, cctor('Pair, i(1) i(2)), cctor('Pair, cctor('Pair, x{1 . 0} x{1 . 1}) x{1 . 2})) .
*** red compile((let 'a = ctor('Pair, 1 2) ; ctor('Pair, ctor('Pair, var('a) var('a)) var('a)))) .
*** red compile(let 'a = ctor('Pair, 1 2) ; let 'b = 42 ; ctor('Pair, ctor('Pair, var('a) var('b)) var('a))) .
*** red no-vars(x{1 . 0} x{1 . 1}) .
*** red eval-terms((x{1 . 0} |-> i(42), x{1 . 1} |-> i(42)), cctor('Pair, x{1 . 0} x{1 . 1})) .
*** red can-sub(cctor('x) ~ i(42), cctor('Nil)) .
*** red can-sub(cctor('Main) ~ dup(1 # x{1 . 0} , x{1 . 1} = i(42) | cctor('Pair, x{1 . 0} x{1 . 1})) , dup(1 # x{1 . 0} , x{1 . 1} = i(42) | cctor('Pair, x{1 . 0} x{1 . 1}))) .
*** rew eval(ctor('Main) = let 'a = 42 ; (ctor('Pair, var('a) var('a)))) .
*** rew eval(ctor('Main) = let 'a = ctor('Pair, 1 2) ; (ctor('Pair, var('a) var('a)))) .
*** rew < 6,4,1 # cctor('Main) ~ dup(1 # x{1 . 0} , x{1 . 1} = cctor('Pair, i(1) i(2)) | cctor('Pair, x{1 . 0} x{1 . 1})), (x{1 . 0} |-> cctor('Pair, x{4 . 0} x{2 . 0}), x{1 . 1} |-> cctor('Pair, x{5 . 0} x{3 . 0}), x{2 . 0} |-> i(2), x{3 . 0} |-> i(2), x{4 . 0} |-> i(1), x{5 . 0} |-> i(1)) | cctor('Pair, x{5 . 0} x{3 . 0}) > .

--- Append
***(
rew eval(
    (ctor('Append, ctor('Nil) var('a)) = ctor('Cons, var('a) ctor('Nil))) ;
    (ctor('Append, ctor('Cons, var('x) var('xs)) var('a)) = ctor('Cons, var('x) ctor('Append, var('xs) var('a)))) ;
    (ctor('Main) = ctor('Append, ctor('Cons, 2 ctor('Cons, 3 ctor('Nil))) 1))
    ).
    )

--- Bubble sort
rew eval(
    (ctor('Sort, ctor('Nil)) = ctor('Nil)) ;
    (ctor('Sort, ctor('Cons, var('x) var('xs))) = ctor('Insert, var('x) ctor('Sort, var('xs)))) ;
    (ctor('Insert, var('v) ctor('Nil)) = ctor('Cons, var('v) ctor('Nil))) ;
    (ctor('Insert, var('v) ctor('Cons, var('x) var('xs))) = ctor('SwapGT, oper>(var('v), var('x)) var('v) var('x) var('xs))) ;
    (ctor('SwapGT, 0 var('v) var('x) var('xs)) = ctor('Cons, var('v) ctor('Cons, var('x) var('xs)))) ;
    (ctor('SwapGT, 1 var('v) var('x) var('xs)) = ctor('Cons, var('x) ctor('Insert, var('v) var('xs)))) ;
    (ctor('Main) = ctor('Sort, ctor('Cons, 3 ctor('Cons, 4 ctor('Cons, 2 ctor('Nil))))))
    ) .
    *** , < 1, 1, 1 # empty, empty > ) .

    ***(
*** rew < 1,1,1 # (cctor('Insert, x{1} cctor('Nil)) ~ cctor('Cons, x{1 . 0} cctor('Nil))) ;;
*** (cctor('Insert, x{1} cctor('Cons, x{2} x{3})) ~ cctor('SwapGT, coper>(x{1 . 0}, x{2 . 0}) x{1 . 0} x{2 . 0} x{3 . 0})) ;;
*** (cctor('Sort, cctor('Nil)) ~ cctor('Nil)) ;;
*** (cctor('Sort, cctor('Cons, x{1} x{2})) ~ cctor('Insert, cctor('Sort, x{2 . 0}))) ;;
*** (cctor('SwapGT, i(0) x{1} x{2} x{3}) ~ cctor('Cons, x{1 . 0} cctor('Cons, x{2 . 0} x{3 . 0}))) ;;
*** cctor('SwapGT, i(1) x{1} x{2} x{3}) ~ cctor('Cons, x{2 . 0} cctor('Insert, x{1 . 0} x{3 . 0})),empty |> cctor('Sort, cctor('Cons, i(3) cctor('Cons, i(4) cctor('Cons, i(2) cctor('Nil))))) > .
)
